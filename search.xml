<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MIT6.824 LAB1</title>
    <url>/posts/60658/</url>
    <content><![CDATA[<h3 id="mit6-824-系列学习"><a href="#mit6-824-系列学习" class="headerlink" title="mit6.824 系列学习"></a>mit6.824 系列学习</h3><p><img src="/" class="lazyload" data-src="https://ipcounter.ihcr.top/?mode=2&amp;mail=xryang_1@stu.xidian.edu.cn&amp;&amp;qq=1099462011&amp;lg=liqiqi_tql&amp;gh=baijianruoliorz&amp;pic=Chtholly"  alt=""></p>
<p>首先贴一下课程官网,方便大家查阅.</p>
<p><a href="https://pdos.csail.mit.edu/6.824/schedule.html" target="_blank" rel="noopener">mit6.824</a></p>
<h5 id="lab1实现"><a href="#lab1实现" class="headerlink" title="lab1实现:"></a>lab1实现:</h5><p>首先 在 <a href="https://pdos.csail.mit.edu/6.824/labs/lab-mr.html" target="_blank" rel="noopener">这里</a>看lab1的要求,我们先执行几个官网给出的命令搭建实验环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git:&#x2F;&#x2F;g.csail.mit.edu&#x2F;6.824-golabs-2020 6.824</span><br><span class="line">$ cd 6.824</span><br><span class="line">$ ls</span><br><span class="line">Makefile src</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p>这样就能直接拉取到所需的代码</p>
<p>大致目录如下:</p>
<p><img src="/" class="lazyload" data-src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/d53343b1-94ed-4137-afe8-46c52633aaa5.png"  alt=""></p>
<p>然后继续看官网:</p>
<blockquote>
<p>We supply you with a simple sequential mapreduce implementation in src/main/mrsequential.go. It runs the maps and reduces one at a time, in a single process. We also provide you with a couple of MapReduce applications: word-count in mrapps/wc.go, and a text indexer in mrapps/indexer.go. You can run word count sequentially as follows:</p>
</blockquote>
<p>大致是提供一个MapReduce application demo 你可以照着run一下.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;6.824</span><br><span class="line">$ cd src&#x2F;main</span><br><span class="line">$ go build -buildmode&#x3D;plugin ..&#x2F;mrapps&#x2F;wc.go</span><br><span class="line">$ rm mr-out*</span><br><span class="line">$ go run mrsequential.go wc.so pg*.txt</span><br><span class="line">$ more mr-out-0</span><br><span class="line">A 509</span><br><span class="line">ABOUT 2</span><br><span class="line">ACT 8</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>于是我在goland试了一下:</p>
<p><img src="/" class="lazyload" data-src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/f58c702b-0807-4fd6-8d63-c8f6224b5ccf.png"  alt=""></p>
<p>报错贴了Google:原来是Windows环境做不了这个lab啊</p>
<p>稍加思索—&gt;发现异常–&gt;<del>放弃实验</del>跑去linux继续苟</p>
<p>然后就会输出它给你的文本的单词统计(这也是我做的第一个hadoop框架有用的demo.hadoop内核代码也是mapreduce.</p>
<p>clone出来的仓库中只有一个文件夹是和第一个lab mapreduce相关的</p>
<p>mr文件夹!芜湖</p>
<h5 id="关于mapreduce系统框架"><a href="#关于mapreduce系统框架" class="headerlink" title="关于mapreduce系统框架:"></a>关于mapreduce系统框架:</h5><p>MapReduce系统是由一个master进程和多个worker进程组成，master和worker之间是通过RPC(Remote Procedure Call)进行通信，master进程负责给多个worker分配任务，记录任务完成状态，并且需要处理worker奔溃或者超时运行等问题，worker需要处理相应的任务，处理完毕发送报告给master，再请求下一个任务。</p>
<p>master结构:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Flag <span class="keyword">struct</span> &#123;</span><br><span class="line">	processing <span class="keyword">bool</span></span><br><span class="line">	finished   <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Master <span class="keyword">struct</span> &#123;</span><br><span class="line">	FileNames      []<span class="keyword">string</span></span><br><span class="line">	MapFlags       []Flag</span><br><span class="line">	ReduceFlags    []Flag</span><br><span class="line">	MapTaskCnts    []<span class="keyword">int</span></span><br><span class="line">	ReduceTaskCnts []<span class="keyword">int</span></span><br><span class="line">	MapAllDone     <span class="keyword">bool</span></span><br><span class="line">	ReduceALLDone  <span class="keyword">bool</span></span><br><span class="line">	MapNum         <span class="keyword">int</span></span><br><span class="line">	ReduceNum      <span class="keyword">int</span></span><br><span class="line">	Mut            sync.Mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>FileNames : pg*.txt这八个文件名</li>
<li>MapFlags :对应的状态</li>
<li>ReduceFlags:同状态</li>
<li>MapTaskCnts:记录map当前的任务序列号,如果map任务发生timeout,HandleTimeout这个函数对map任务进行的processing标志清0,重新分配,当前任务序列号在上个任务号中加1,如果之前发生timeout的任务来报告完成,由于小于当前任务号,HandleWorkerReport函数可以无需记录,直接退出.</li>
<li>ReduceTaskcnts:同上</li>
<li>MapAllDone:任务全部完成,变成true</li>
<li>ReduceAllDone:Reduce任务全部完成为true</li>
<li>MapNum:Map任务数</li>
<li>ReduceNum:任务数</li>
<li>Mut:排它锁</li>
</ul>
<p>Worker结构:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TaskState <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	MapState    TaskState = <span class="number">0</span></span><br><span class="line">	ReduceState TaskState = <span class="number">1</span></span><br><span class="line">	StopState   TaskState = <span class="number">2</span></span><br><span class="line">	WaitState   TaskState = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WorkerTask <span class="keyword">struct</span> &#123;</span><br><span class="line">	MapID          <span class="keyword">int</span></span><br><span class="line">	ReduceID       <span class="keyword">int</span></span><br><span class="line">	ReduceNum      <span class="keyword">int</span></span><br><span class="line">	MapNum         <span class="keyword">int</span></span><br><span class="line">	MapTaskCnt     <span class="keyword">int</span></span><br><span class="line">	ReduceTaskCnt  <span class="keyword">int</span></span><br><span class="line">	State          TaskState</span><br><span class="line">	FileName       <span class="keyword">string</span></span><br><span class="line">	MapFunction    <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span> []<span class="title">KeyValue</span></span></span><br><span class="line">	ReduceFunction <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MapID和ReduceID：Map任务ID和Reduce任务ID</li>
<li>MapNum和ReduceNum：Map的任务总数和Reduce任务总数</li>
<li>MapTaskCnt和ReduceTaskCnt：Map任务序列号和Reduce序列号<br>State：任务有四种状态，分别是MapState，ReduceState，StopState和WaitState，MapState表示当前需要处理Map任务，ReduceState表示当前需要处理Reduce任务，WaitState表示当前没有需要处理的任务，开始睡眠等待，StopState代表任务已全部完成，可以退出。</li>
<li>FileName：表示Map任务需要的文件名</li>
<li>MapFunction和ReduceFunction：任务根据State需要进行的Map函数或者Reduce函数</li>
</ul>
<p>Master接口:</p>
<p>创建Master:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeMaster</span><span class="params">(files []<span class="keyword">string</span>, nReduce <span class="keyword">int</span>)</span> *<span class="title">Master</span></span> &#123;</span><br><span class="line">	m := Master&#123;FileNames: files,</span><br><span class="line">		MapFlags:       <span class="built_in">make</span>([]Flag, <span class="built_in">len</span>(files), <span class="built_in">len</span>(files)),</span><br><span class="line">		ReduceFlags:    <span class="built_in">make</span>([]Flag, nReduce, nReduce),</span><br><span class="line">		MapNum:         <span class="built_in">len</span>(files),</span><br><span class="line">		ReduceNum:      nReduce,</span><br><span class="line">		MapAllDone:     <span class="literal">false</span>,</span><br><span class="line">		ReduceALLDone:  <span class="literal">false</span>,</span><br><span class="line">		MapTaskCnts:    <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(files)),</span><br><span class="line">		ReduceTaskCnts: <span class="built_in">make</span>([]<span class="keyword">int</span>, nReduce),</span><br><span class="line">	&#125;</span><br><span class="line">	m.server()</span><br><span class="line">	args, reply := NoArgs&#123;&#125;, NoReply&#123;&#125;</span><br><span class="line">	<span class="keyword">go</span> m.HandleTimeOut(&amp;args, &amp;reply)</span><br><span class="line">	<span class="keyword">return</span> &amp;m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成worker task:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Master)</span> <span class="title">CreateWorkerTask</span><span class="params">(args *NoArgs, workerTask *WorkerTask)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	m.Mut.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.Mut.Unlock()</span><br><span class="line">	<span class="keyword">if</span> !m.MapAllDone &#123;</span><br><span class="line">		<span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; m.MapNum; idx++ &#123;</span><br><span class="line">			<span class="keyword">if</span> !m.MapFlags[idx].processing &amp;&amp; !m.MapFlags[idx].finished &#123;</span><br><span class="line">				workerTask.ReduceNum = m.ReduceNum</span><br><span class="line">				workerTask.MapNum = m.MapNum</span><br><span class="line">				workerTask.State = MapState</span><br><span class="line">				workerTask.MapID = idx</span><br><span class="line">				workerTask.FileName = m.FileNames[idx]</span><br><span class="line">				m.MapTaskCnts[idx]++</span><br><span class="line">				workerTask.MapTaskCnt = m.MapTaskCnts[idx]</span><br><span class="line">				m.MapFlags[idx].processing = <span class="literal">true</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		workerTask.State = WaitState</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !m.ReduceALLDone &#123;</span><br><span class="line">		<span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; m.ReduceNum; idx++ &#123;</span><br><span class="line">			<span class="keyword">if</span> !m.ReduceFlags[idx].processing &amp;&amp; !m.ReduceFlags[idx].finished &#123;</span><br><span class="line">				workerTask.State = ReduceState</span><br><span class="line">				workerTask.ReduceNum = m.ReduceNum</span><br><span class="line">				workerTask.MapNum = m.MapNum</span><br><span class="line">				workerTask.ReduceID = idx</span><br><span class="line">				m.ReduceTaskCnts[idx]++</span><br><span class="line">				workerTask.ReduceTaskCnt = m.ReduceTaskCnts[idx]</span><br><span class="line">				m.ReduceFlags[idx].processing = <span class="literal">true</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		workerTask.State = WaitState</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	workerTask.State = StopState</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数首先会获得互斥锁，然后判断MapAllDone是否为false，为false进入循环遍历，如果某个任务的processing状态和finished状态都为false，说明这个任务可以需要被处理，可以分配，讲配置参数写入到输出参数中，并标志master中当前任务的状态processing为true以及序列号。如果没有任务需要处理，说明map有些任务正在处理，有些已完成。进入等待阶段。判断ReduceALLDone与前面类似。不加以叙述。</p>
<p>处理worker report</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Master)</span> <span class="title">HandleWorkerReport</span><span class="params">(wr *WorkerReportArgs, task *NoReply)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	m.Mut.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.Mut.Unlock()</span><br><span class="line">	<span class="keyword">if</span> wr.IsSuccess &#123;</span><br><span class="line">		<span class="keyword">if</span> wr.State == MapState &#123;</span><br><span class="line">			<span class="keyword">if</span> wr.MapTaskCnt == m.MapTaskCnts[wr.MapID] &#123;</span><br><span class="line">				m.MapFlags[wr.MapID].finished = <span class="literal">true</span></span><br><span class="line">				m.MapFlags[wr.MapID].processing = <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> wr.ReduceTaskCnt == m.ReduceTaskCnts[wr.ReduceID] &#123;</span><br><span class="line">				m.ReduceFlags[wr.ReduceID].finished = <span class="literal">true</span></span><br><span class="line">				m.ReduceFlags[wr.ReduceID].processing = <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> wr.State == MapState &#123;</span><br><span class="line">			<span class="keyword">if</span> m.MapFlags[wr.MapID].finished == <span class="literal">false</span> &#123;</span><br><span class="line">				m.MapFlags[wr.MapID].processing = <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> m.ReduceFlags[wr.ReduceID].finished == <span class="literal">false</span> &#123;</span><br><span class="line">				m.ReduceFlags[wr.ReduceID].processing = <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> id := <span class="number">0</span>; id &lt; m.MapNum; id++ &#123;</span><br><span class="line">		<span class="keyword">if</span> !m.MapFlags[id].finished &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> id == m.MapNum<span class="number">-1</span> &#123;</span><br><span class="line">				m.MapAllDone = <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> id := <span class="number">0</span>; id &lt; m.ReduceNum; id++ &#123;</span><br><span class="line">		<span class="keyword">if</span> !m.ReduceFlags[id].finished &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> id == m.ReduceNum<span class="number">-1</span> &#123;</span><br><span class="line">				m.ReduceALLDone = <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入参数有一个标示位,表示任务是否成功,成功判断任务状态以及序列号,如果序列号与master对应上,可以表明这个任务成功,如果对不上,说明这个是个timeout任务,无需处理.如果任务标志位为false,进入错误处理,判断任务是否完成,因为可能是timeout任务标志位为false，未完成让processing置0，CreateWorkerTask可以重新分配。最后判断Map任务和Reduce任务是否相应全部完成，全部完成可以设置MapALLDone和ReduceALLDone为true。</p>
<p>处理timeout:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Master)</span> <span class="title">HandleTimeOut</span><span class="params">(args *NoArgs, reply *NoReply)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		m.Mut.Lock()</span><br><span class="line">		<span class="keyword">if</span> m.MapAllDone &amp;&amp; m.ReduceALLDone &#123;</span><br><span class="line">			m.Mut.Unlock()</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		time.Sleep(<span class="number">30</span> * time.Millisecond)</span><br><span class="line">		<span class="keyword">if</span> !m.MapAllDone &#123;</span><br><span class="line">			<span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; m.MapNum; idx++ &#123;</span><br><span class="line">				<span class="keyword">if</span> m.MapFlags[idx].finished == <span class="literal">false</span> &#123;</span><br><span class="line">					m.MapFlags[idx].processing = <span class="literal">false</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; m.ReduceNum; idx++ &#123;</span><br><span class="line">				<span class="keyword">if</span> m.ReduceFlags[idx].finished == <span class="literal">false</span> &#123;</span><br><span class="line">					m.ReduceFlags[idx].processing = <span class="literal">false</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		m.Mut.Unlock()</span><br><span class="line">		time.Sleep(<span class="number">2000</span> * time.Millisecond)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>处理timeout很简单,先判断MapAllDone和ReduceAllDone是不是都为true,都为true都退出即可.然后判断m任务有无完成,没有完成任务的processing清为0,就可以让createWorkerTask重新分配没有完成的任务.最后释放锁,睡眠2S,可以看到Handletimeout函数是以2S为间隔,2s没有完成任务的视为timeout.</p>
<p>Work接口</p>
<p>生成Work</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// main/mrworker.go calls this function.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Worker</span><span class="params">(mapf <span class="keyword">func</span>(<span class="keyword">string</span>, <span class="keyword">string</span>)</span> []<span class="title">KeyValue</span>,</span></span><br><span class="line">	reducef <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>)</span> <span class="title">string</span>)</span> &#123;</span><br><span class="line">	wt := WorkerTask&#123;</span><br><span class="line">		MapFunction:    mapf,</span><br><span class="line">		ReduceFunction: reducef,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		wt.GetWorkerTask()</span><br><span class="line">		<span class="keyword">if</span> wt.State == MapState &#123;</span><br><span class="line">			wt.DoMapWork()</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> wt.State == ReduceState &#123;</span><br><span class="line">			wt.DoReduceWork()</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> wt.State == StopState &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> wt.State == WaitState &#123;</span><br><span class="line">			time.Sleep(<span class="number">300</span> * time.Millisecond)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mrworker会调用worker函数，传入map函数和reduce函数，根据函数参数创建一个worker，然后进入循环，调用GetWorkerTask函数，这个函数会调用Master.CreateWorkerTask函数，并传入两个参数，得到任务分配后，讲相应的参数和状态赋值给worker。worker就可以根据状态进入处理相应任务或者睡眠，或者退出。</p>
<p>Map Work</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wt *WorkerTask)</span> <span class="title">DoMapWork</span><span class="params">()</span></span> &#123;</span><br><span class="line">	file, err := os.Open(wt.FileName)</span><br><span class="line">	content, err := ioutil.ReadAll(file)</span><br><span class="line">	file.Close()</span><br><span class="line">	kvs := wt.MapFunction(wt.FileName, <span class="keyword">string</span>(content))</span><br><span class="line">	intermediate := <span class="built_in">make</span>([][]KeyValue, wt.ReduceNum, wt.ReduceNum)</span><br><span class="line">	<span class="keyword">for</span> _, kv := <span class="keyword">range</span> kvs &#123;</span><br><span class="line">		idx := ihash(kv.Key) % wt.ReduceNum</span><br><span class="line">		intermediate[idx] = <span class="built_in">append</span>(intermediate[idx], kv)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; wt.ReduceNum; idx++ &#123;</span><br><span class="line">		intermediateFileName := fmt.Sprintf(<span class="string">"mr-%d-%d"</span>, wt.MapID, idx)</span><br><span class="line">		file, err = os.Create(intermediateFileName)</span><br><span class="line">		data, _ := json.Marshal(intermediate[idx])</span><br><span class="line">		_, err = file.Write(data)</span><br><span class="line">		file.Close()</span><br><span class="line">	&#125;</span><br><span class="line">	wt.ReportWorkerTask(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wt *WorkerTask)</span> <span class="title">ReportWorkerTask</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">	wra := WorkerReportArgs&#123;</span><br><span class="line">		MapID:     wt.MapID,</span><br><span class="line">		ReduceID:  wt.ReduceID,</span><br><span class="line">		State:     wt.State,</span><br><span class="line">		IsSuccess: <span class="literal">true</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> wt.State == MapState &#123;</span><br><span class="line">		wra.MapTaskCnt = wt.MapTaskCnt</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		wra.ReduceTaskCnt = wt.ReduceTaskCnt</span><br><span class="line">	&#125;</span><br><span class="line">	wrr := NoReply&#123;&#125;</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		wra.IsSuccess = <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	call(<span class="string">"Master.HandleWorkerReport"</span>, &amp;wra, &amp;wrr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Map work就是读取相应的文件，调用MapFunction生成KeyValue对，然后根据哈希函数得到要讲当前key分配到哪一块中，总共有ReduceNum块，最后根据这么块生成对应map以及reduce块的文件。然后调用ReportWorkerTask报告成功，传入nil表示成功。ReportWorkerTask内部会调用Master.HandleWorkerReport函数来汇报这一执行结果。</p>
<p>Reduce Work</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wt *WorkerTask)</span> <span class="title">DoReduceWork</span><span class="params">()</span></span> &#123;</span><br><span class="line">	kvsReduce := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>)</span><br><span class="line">	<span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; wt.MapNum; idx++ &#123;</span><br><span class="line">		filename := fmt.Sprintf(<span class="string">"mr-%d-%d"</span>, idx, wt.ReduceID)</span><br><span class="line">		file, err := os.Open(filename)</span><br><span class="line">		content, err := ioutil.ReadAll(file)</span><br><span class="line">		file.Close()</span><br><span class="line">		kvs := <span class="built_in">make</span>([]KeyValue, <span class="number">0</span>)</span><br><span class="line">		err = json.Unmarshal(content, &amp;kvs)</span><br><span class="line">		<span class="keyword">for</span> _, kv := <span class="keyword">range</span> kvs &#123;</span><br><span class="line">			_, ok := kvsReduce[kv.Key]</span><br><span class="line">			<span class="keyword">if</span> !ok &#123;</span><br><span class="line">				kvsReduce[kv.Key] = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			kvsReduce[kv.Key] = <span class="built_in">append</span>(kvsReduce[kv.Key], kv.Value)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ReduceResult := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> key, val := <span class="keyword">range</span> kvsReduce &#123;</span><br><span class="line">		ReduceResult = <span class="built_in">append</span>(ReduceResult, fmt.Sprintf(<span class="string">"%v %v\n"</span>, key, wt.ReduceFunction(key, val)))</span><br><span class="line">	&#125;</span><br><span class="line">	outFileName := fmt.Sprintf(<span class="string">"mr-out-%d"</span>, wt.ReduceID)</span><br><span class="line">	err := ioutil.WriteFile(outFileName, []<span class="keyword">byte</span>(strings.Join(ReduceResult, <span class="string">""</span>)), <span class="number">0644</span>)</span><br><span class="line">	wt.ReportWorkerTask(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里首先读取相同块的所有文件,需要对相同key的内容聚合在一起,然后循环调用ReduceFunction得到Reduce的结果,最后生成输出.</p>
<h5 id="END"><a href="#END" class="headerlink" title="END:"></a>END:</h5><p>到这里MapReduce实现的就差不多了,关于MapReduce,总结下来是:map对每个文件生成单词和单一数目,分在不同的区块保存,Reduce对不同区块进行统计,得到最终结果.讲这两个过程直接包装起来就是mapreduce.</p>
<p>关于MapReduce的论文,可以阅读<a href="https://pdos.csail.mit.edu/6.824/papers/mapreduce.pdf" target="_blank" rel="noopener">这里</a>.</p>
<p>当然由于是04年的论文,所以现在的翻译资源已经很丰富了(<del>正经人谁去读原版那种单词都认识合成一句话就不知道讲什么的东西呢</del>.</p>
<p>最后放一张过test图片:</p>
<p><img src="/" class="lazyload" data-src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/c4f8429c-ca81-426e-9e07-32a5a8cc446e.png"  alt=""></p>
<p>​                                                                                                        —MIT6.824 lab1 end</p>
<p>​                                                                                                        ———–2020.10.11    </p>
<p>@copyright ————baijianruoliorz@Github——————————–</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>MIT6.824</tag>
        <tag>blog</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Grpc系列学习(一)</title>
    <url>/posts/57842/</url>
    <content><![CDATA[<p>##Grpc系列学习(一)</p>
<p><img src="/" class="lazyload" data-src="https://ipcounter.ihcr.top/?mode=2&amp;mail=xryang_1@stu.xidian.edu.cn&amp;&amp;qq=1099462011&amp;lg=liqiqi_tql&amp;gh=baijianruoliorz&amp;pic=Chtholly"  alt=""></p>
<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>刚开始学习Go的时候就想认识Go有没有类似与SpringCloud的分布式框架,也是那个时候得知了Grpc.说来惭愧,对Grpc的认识也仅仅停留在:<strong>我知道有这么个东西,但是我不会用</strong>.因为准备写一系列博客,来开始重新拾起这个分布式框架.</p>
<p><del>hadoop:应该是鸽的差不多了,主要是学着学着突然没兴趣继续往下了解了,正巧这两天有写Go的手感</del>.</p>
<p><del>话说哪个啥实验班还要专门开课程,好想翘</del></p>
<h4 id="Start"><a href="#Start" class="headerlink" title="Start:"></a>Start:</h4><p>Grac官网上的定义是:<strong>A high-performance, open source universal RPC framework.</strong></p>
<p>我们简单理解成一个高性能分布式RPC框架,当然我的技术博客不会出现太多与代码无关的东西.所以不再详细介绍RPC是啥玩意.</p>
<blockquote>
<p>gRPC is a modern open source high performance RPC framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services.</p>
</blockquote>
<p>上段内容来自<a href="https://grpc.io/" target="_blank" rel="noopener">官网</a> ,Grpc是跨语言的.官网上同给出了其他语言的示例学习<del>真的太多语言了</del></p>
<h4 id="做个比较"><a href="#做个比较" class="headerlink" title="做个比较"></a>做个比较</h4><p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720201021140944.png"  alt=""></p>
<p>(真的不是来黑grpc的)</p>
<h4 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h4><p>Protocol Buffers 是一种与语言、平台无关，可扩展的序列化结构化数据的方法，常用于通信协议，数据存储等等。相较于 JSON、XML，它更小、更快、更简单，因此也更受开发人员的青眯</p>
<p>语法我略了,<del>因为我自己也不太会</del></p>
<p>这个是grpc必须的定义文件.</p>
<h4 id="Get-the-example-code"><a href="#Get-the-example-code" class="headerlink" title="Get the example code"></a>Get the example code</h4><p>The example code is part of the <a href="https://github.com/grpc/grpc-go" target="_blank" rel="noopener">grpc-go</a> repo.</p>
<p><a href="https://github.com/grpc/grpc-go/archive/master.zip" target="_blank" rel="noopener">Download the repo as a zip file</a> and unzip it, or clone the repo:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/grpc/grpc-go</span><br></pre></td></tr></table></figure>

<p>亲测 git clone速度较慢.建议直接点链接下载.</p>
<p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720201021143519.jpg"  alt=""></p>
<p>这里已经把全部源码clone下来了,照着官方文档跑个Hello Grpc.</p>
<p>server端:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go run greeter_server&#x2F;main.go</span><br></pre></td></tr></table></figure>

<p>client端:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go run greeter_client&#x2F;main.go</span><br></pre></td></tr></table></figure>

<p>这里分别启动了server端和client端的服务,client端发出Hello world </p>
<p>server接收.</p>
<p>记得开两个控制台</p>
<p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720201021144646.jpg"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720201021144638.jpg"  alt=""></p>
<p>Congratulations! You’ve just run a client-server application with gRPC.</p>
<p>接下来我们自己使用Grpc以及protoc来编写一个server和client用来互相通信.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get -u google.golang.org&#x2F;grpc</span><br></pre></td></tr></table></figure>

<p>protoc windows怎么下载自己查一下,我下太久了…</p>
<p>总之运行以下命令能看到正常输出就行.</p>
<p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720201021145235.png"  alt=""></p>
<p>protoc plugin可以用goland marketplace下载.</p>
<p>proto文件:</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">package</span> proto;</span><br><span class="line">​</span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> Search(SearchRequest) <span class="keyword">returns</span> (SearchResponse) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">​</span></span><br><span class="line"><span class="function">message SearchRequest &#123;</span></span><br><span class="line"><span class="function">    string request = 1</span>;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchResponse</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> response = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>生成</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protoc --go_out&#x3D;plugins&#x3D;grpc:. *.proto</span><br></pre></td></tr></table></figure>

<p>我们定义的 proto 文件是涉及了 RPC 服务的，而默认是不会生成 RPC 代码的，因此需要给出 <code>plugins</code> 参数传递给 <code>protoc-gen-go</code>，告诉它，请支持 RPC（这里指定了 gRPC）</p>
<p>–go_out=.：设置 Go 代码输出的目录</p>
<p>该指令会加载 protoc-gen-go 插件达到生成 Go 代码的目的，生成的文件以 .pb.go 为文件后缀</p>
<p>: （冒号）</p>
<p>冒号充当分隔符的作用，后跟所需要的参数集。如果这处不涉及 RPC，命令可简化为：</p>
<p>执行命令后可以得到 .pb.go文件:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SearchRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">    Request              <span class="keyword">string</span>   <span class="string">`protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`</span></span><br><span class="line">    XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125; <span class="string">`json:"-"`</span></span><br><span class="line">    XXX_unrecognized     []<span class="keyword">byte</span>   <span class="string">`json:"-"`</span></span><br><span class="line">    XXX_sizecache        <span class="keyword">int32</span>    <span class="string">`json:"-"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *SearchRequest)</span> <span class="title">Reset</span><span class="params">()</span></span>         &#123; *m = SearchRequest&#123;&#125; &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *SearchRequest)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> proto.CompactTextString(m) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*SearchRequest)</span> <span class="title">ProtoMessage</span><span class="params">()</span></span>    &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*SearchRequest)</span> <span class="title">Descriptor</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fileDescriptor_search_8b45f79ee13ff6a3, []<span class="keyword">int</span>&#123;<span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *SearchRequest)</span> <span class="title">GetRequest</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> m != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m.Request</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="server"><a href="#server" class="headerlink" title="server:"></a>server:</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"google.golang.org/grpc"</span></span><br><span class="line"></span><br><span class="line">    pb <span class="string">"github.com/EDDYCJY/go-grpc-example/proto"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SearchService <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SearchService)</span> <span class="title">Search</span><span class="params">(ctx context.Context, r *pb.SearchRequest)</span> <span class="params">(*pb.SearchResponse, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;pb.SearchResponse&#123;Response: r.GetRequest() + <span class="string">" Server"</span>&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="string">"9001"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    server := grpc.NewServer()</span><br><span class="line">    pb.RegisterSearchServiceServer(server, &amp;SearchService&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    lis, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":"</span>+PORT)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"net.Listen err: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server.Serve(lis)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建 gRPC Server 对象，你可以理解为它是 Server 端的抽象对象</li>
<li>将 SearchService（其包含需要被调用的服务端接口）注册到 gRPC Server 的内部注册中心。这样可以在接受到请求时，通过内部的服务发现，发现该服务端接口并转接进行逻辑处理</li>
<li>创建 Listen，监听 TCP 端口</li>
<li>gRPC Server 开始 lis.Accept，直到 Stop 或 GracefulStop</li>
</ul>
<h4 id="client"><a href="#client" class="headerlink" title="client:"></a>client:</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"google.golang.org/grpc"</span></span><br><span class="line"></span><br><span class="line">    pb <span class="string">"github.com/EDDYCJY/go-grpc-example/proto"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="string">"9001"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    conn, err := grpc.Dial(<span class="string">":"</span>+PORT, grpc.WithInsecure())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"grpc.Dial err: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    client := pb.NewSearchServiceClient(conn)</span><br><span class="line">    resp, err := client.Search(context.Background(), &amp;pb.SearchRequest&#123;</span><br><span class="line">        Request: <span class="string">"gRPC"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"client.Search err: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Printf(<span class="string">"resp: %s"</span>, resp.GetResponse())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建与给定目标（服务端）的连接交互</li>
<li>创建 SearchService 的客户端对象</li>
<li>发送 RPC 请求，等待同步响应，得到回调后返回响应结果</li>
<li>输出响应结果</li>
</ul>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动:"></a>启动:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go run server.go</span><br><span class="line">go run client.go</span><br></pre></td></tr></table></figure>

<p>输出:resp: gRPC Server</p>
<p>即可完成一次简单的通信!</p>
<p>@copyright ————baijianruoliorz@Github——————————–</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>分布式</tag>
        <tag>Grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>Grpc系列学习(二)</title>
    <url>/posts/8534/</url>
    <content><![CDATA[<p>Grpc系列学习(二)</p>
<p><strong>一切都是RPC</strong></p>
<p>写在前面:因为1024CSDN写博客会有徽章,本人多少带点收集控,故正好整理出第二篇关于Grpc的学习文章.</p>
<p>这次照例宣传一下我的个人博客:</p>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo:"></a>demo:</h3><h1 id="制作证书"><a href="#制作证书" class="headerlink" title="制作证书"></a><strong>制作证书</strong></h1><p>在服务端支持<code>Rpc</code>和<code>Restful Api</code>，需要用到<code>TLS</code>，因此我们要先制作证书</p>
<p>进入<code>certs</code>目录，生成<code>TLS</code>所需的公钥密钥文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line"></span><br><span class="line">openssl ecparam -genkey -name secp384r1 -out server.key</span><br></pre></td></tr></table></figure>

<ul>
<li><code>openssl genrsa</code>：生成<code>RSA</code>私钥，命令的最后一个参数，将指定生成密钥的位数，如果没有指定，默认512</li>
<li><code>openssl ecparam</code>：生成<code>ECC</code>私钥，命令为椭圆曲线密钥参数生成及操作，本文中<code>ECC</code>曲线选择的是<code>secp384r1</code></li>
</ul>
<h4 id="自签名公钥"><a href="#自签名公钥" class="headerlink" title="自签名公钥"></a>自签名公钥</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl req -new -x509 -sha256 -key server.key -out server.pem -days 3650</span><br></pre></td></tr></table></figure>

<p><code>openssl req</code>：生成自签名证书，<code>-new</code>指生成证书请求、<code>-sha256</code>指使用<code>sha256</code>加密、<code>-key</code>指定私钥文件、<code>-x509</code>指输出证书、<code>-days 3650</code>为有效期，此后则输入证书拥有者信息</p>
<h4 id="填写信息"><a href="#填写信息" class="headerlink" title="填写信息"></a>填写信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Country Name (2 letter code) [XX]:</span><br><span class="line">State or Province Name (full name) []:</span><br><span class="line">Locality Name (eg, city) [Default City]:</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:</span><br><span class="line">Organizational Unit Name (eg, section) []:</span><br><span class="line">Common Name (eg, your name or your server&#39;s hostname) []:grpc server name</span><br><span class="line">Email Address []:</span><br></pre></td></tr></table></figure>

<h3 id="Proto"><a href="#Proto" class="headerlink" title="Proto"></a>Proto</h3><h4 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h4><p>1.google.api</p>
<p>我们看到<code>proto</code>目录中有<code>google/api</code>目录，它用到了<code>google</code>官方提供的两个<code>api</code>描述文件，主要是针对<code>grpc-gateway</code>的<code>http</code>转换提供支持，定义了<code>Protocol Buffer</code>所扩展的<code>HTTP Option</code></p>
<p><code>annotations.proto</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Copyright (c) 2015, Google Inc.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">&#x2F;&#x2F; you may not use this file except in compliance with the License.</span><br><span class="line">&#x2F;&#x2F; You may obtain a copy of the License at</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;     http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Unless required by applicable law or agreed to in writing, software</span><br><span class="line">&#x2F;&#x2F; distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">&#x2F;&#x2F; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">&#x2F;&#x2F; See the License for the specific language governing permissions and</span><br><span class="line">&#x2F;&#x2F; limitations under the License.</span><br><span class="line">​</span><br><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line">​</span><br><span class="line">package google.api;</span><br><span class="line">​</span><br><span class="line">import &quot;google&#x2F;api&#x2F;http.proto&quot;;</span><br><span class="line">import &quot;google&#x2F;protobuf&#x2F;descriptor.proto&quot;;</span><br><span class="line">​</span><br><span class="line">option java_multiple_files &#x3D; true;</span><br><span class="line">option java_outer_classname &#x3D; &quot;AnnotationsProto&quot;;</span><br><span class="line">option java_package &#x3D; &quot;com.google.api&quot;;</span><br><span class="line">​</span><br><span class="line">extend google.protobuf.MethodOptions &#123;</span><br><span class="line">  &#x2F;&#x2F; See &#96;HttpRule&#96;.</span><br><span class="line">  HttpRule http &#x3D; 72295728;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>http.proto</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Copyright 2016 Google Inc.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">&#x2F;&#x2F; you may not use this file except in compliance with the License.</span><br><span class="line">&#x2F;&#x2F; You may obtain a copy of the License at</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;     http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Unless required by applicable law or agreed to in writing, software</span><br><span class="line">&#x2F;&#x2F; distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">&#x2F;&#x2F; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">&#x2F;&#x2F; See the License for the specific language governing permissions and</span><br><span class="line">&#x2F;&#x2F; limitations under the License.</span><br><span class="line"></span><br><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package google.api;</span><br><span class="line"></span><br><span class="line">option cc_enable_arenas &#x3D; true;</span><br><span class="line">option java_multiple_files &#x3D; true;</span><br><span class="line">option java_outer_classname &#x3D; &quot;HttpProto&quot;;</span><br><span class="line">option java_package &#x3D; &quot;com.google.api&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Defines the HTTP configuration for a service. It contains a list of</span><br><span class="line">&#x2F;&#x2F; [HttpRule][google.api.HttpRule], each specifying the mapping of an RPC method</span><br><span class="line">&#x2F;&#x2F; to one or more HTTP REST API methods.</span><br><span class="line">message Http &#123;</span><br><span class="line">  &#x2F;&#x2F; A list of HTTP rules for configuring the HTTP REST API methods.</span><br><span class="line">  repeated HttpRule rules &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Use CustomHttpPattern to specify any HTTP method that is not included in the</span><br><span class="line">&#x2F;&#x2F; &#96;pattern&#96; field, such as HEAD, or &quot;*&quot; to leave the HTTP method unspecified for</span><br><span class="line">&#x2F;&#x2F; a given URL path rule. The wild-card rule is useful for services that provide</span><br><span class="line">&#x2F;&#x2F; content to Web (HTML) clients.</span><br><span class="line">message HttpRule &#123;</span><br><span class="line">  &#x2F;&#x2F; Selects methods to which this rule applies.</span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F; Refer to [selector][google.api.DocumentationRule.selector] for syntax details.</span><br><span class="line">  string selector &#x3D; 1;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Determines the URL pattern is matched by this rules. This pattern can be</span><br><span class="line">  &#x2F;&#x2F; used with any of the &#123;get|put|post|delete|patch&#125; methods. A custom method</span><br><span class="line">  &#x2F;&#x2F; can be defined using the &#39;custom&#39; field.</span><br><span class="line">  oneof pattern &#123;</span><br><span class="line">    &#x2F;&#x2F; Used for listing and getting information about resources.</span><br><span class="line">    string get &#x3D; 2;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Used for updating a resource.</span><br><span class="line">    string put &#x3D; 3;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Used for creating a resource.</span><br><span class="line">    string post &#x3D; 4;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Used for deleting a resource.</span><br><span class="line">    string delete &#x3D; 5;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Used for updating a resource.</span><br><span class="line">    string patch &#x3D; 6;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Custom pattern is used for defining custom verbs.</span><br><span class="line">    CustomHttpPattern custom &#x3D; 8;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; The name of the request field whose value is mapped to the HTTP body, or</span><br><span class="line">  &#x2F;&#x2F; &#96;*&#96; for mapping all fields not captured by the path pattern to the HTTP</span><br><span class="line">  &#x2F;&#x2F; body. NOTE: the referred field must not be a repeated field.</span><br><span class="line">  string body &#x3D; 7;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Additional HTTP bindings for the selector. Nested bindings must</span><br><span class="line">  &#x2F;&#x2F; not contain an &#96;additional_bindings&#96; field themselves (that is,</span><br><span class="line">  &#x2F;&#x2F; the nesting may only be one level deep).</span><br><span class="line">  repeated HttpRule additional_bindings &#x3D; 11;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; A custom pattern is used for defining custom HTTP verb.</span><br><span class="line">message CustomHttpPattern &#123;</span><br><span class="line">  &#x2F;&#x2F; The name of this custom HTTP verb.</span><br><span class="line">  string kind &#x3D; 1;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; The path matched by this custom verb.</span><br><span class="line">  string path &#x3D; 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>hello.proto</code></li>
</ol>
<p>这一小节将编写<code>Demo</code>的<code>.proto</code>文件，我们在<code>proto</code>目录下新建<code>hello.proto</code>文件，写入文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package proto;</span><br><span class="line"></span><br><span class="line">import &quot;google&#x2F;api&#x2F;annotations.proto&quot;;</span><br><span class="line"></span><br><span class="line">service HelloWorld &#123;</span><br><span class="line">    rpc SayHelloWorld(HelloWorldRequest) returns (HelloWorldResponse) &#123;</span><br><span class="line">        option (google.api.http) &#x3D; &#123;</span><br><span class="line">            post: &quot;&#x2F;hello_world&quot;</span><br><span class="line">            body: &quot;*&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message HelloWorldRequest &#123;</span><br><span class="line">    string referer &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message HelloWorldResponse &#123;</span><br><span class="line">    string message &#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在<code>hello.proto</code>文件中，引用了<code>google/api/annotations.proto</code>，达到支持<code>HTTP Option</code>的效果</p>
<ul>
<li>定义了一个<code>service</code>RPC服务<code>HelloWorld</code>，在其内部定义了一个<code>HTTP Option</code>的<code>POST</code>方法，<code>HTTP</code>响应路径为<code>/hello_world</code></li>
<li>定义<code>message</code>类型<code>HelloWorldRequest</code>、<code>HelloWorldResponse</code>，用于响应请求和返回结果</li>
</ul>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a><strong>编译</strong></h2><p>在编写完<code>.proto</code>文件后，我们需要对其进行编译，就能够在<code>server</code>中使用</p>
<p>进入<code>proto</code>目录，执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 编译google.api</span><br><span class="line">protoc -I . --go_out&#x3D;plugins&#x3D;grpc,Mgoogle&#x2F;protobuf&#x2F;descriptor.proto&#x3D;github.com&#x2F;golang&#x2F;protobuf&#x2F;protoc-gen-go&#x2F;descriptor:. google&#x2F;api&#x2F;*.proto</span><br><span class="line"></span><br><span class="line">#编译hello_http.proto为hello_http.pb.proto</span><br><span class="line">protoc -I . --go_out&#x3D;plugins&#x3D;grpc,Mgoogle&#x2F;api&#x2F;annotations.proto&#x3D;grpc-hello-world&#x2F;proto&#x2F;google&#x2F;api:. .&#x2F;hello.proto</span><br><span class="line"></span><br><span class="line">#编译hello_http.proto为hello_http.pb.gw.proto</span><br><span class="line">protoc --grpc-gateway_out&#x3D;logtostderr&#x3D;true:. .&#x2F;hello.proto</span><br></pre></td></tr></table></figure>

<p>执行完毕后将生成<code>hello.pb.go</code>和<code>hello.gw.pb.go</code>，分别针对<code>grpc</code>和<code>grpc-gateway</code>的功能支持</p>
<h3 id="命令行模块-cmd"><a href="#命令行模块-cmd" class="headerlink" title="命令行模块 cmd"></a><strong>命令行模块</strong> <code>cmd</code></h3><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>这一小节我们编写命令行模块，为什么要独立出来呢，是为了将<code>cmd</code>和<code>server</code>两者解耦，避免混淆在一起。</p>
<p>我们采用 <a href="https://github.com/spf13/cobra" target="_blank" rel="noopener">Cobra</a> 来完成这项功能，<code>Cobra</code>既是创建强大的现代CLI应用程序的库，也是生成应用程序和命令文件的程序。提供了以下功能：</p>
<ul>
<li>简易的子命令行模式</li>
<li>完全兼容posix的命令行模式(包括短和长版本)</li>
<li>嵌套的子命令</li>
<li>全局、本地和级联<code>flags</code></li>
<li>使用<code>Cobra</code>很容易的生成应用程序和命令，使用<code>cobra create appname</code>和<code>cobra add cmdname</code></li>
<li>智能提示</li>
<li>自动生成commands和flags的帮助信息</li>
<li>自动生成详细的help信息<code>-h</code>，<code>--help</code>等等</li>
<li>自动生成的bash自动完成功能</li>
<li>为应用程序自动生成手册</li>
<li>命令别名</li>
<li>定义您自己的帮助、用法等的灵活性。</li>
<li>可选与<a href="https://github.com/spf13/viper" target="_blank" rel="noopener">viper</a>紧密集成的apps</li>
</ul>
<p>—选自某百科</p>
<h2 id="编写server"><a href="#编写server" class="headerlink" title="编写server"></a><strong>编写<code>server</code></strong></h2><p>在编写<code>cmd</code>时需要先用<code>server</code>进行测试关联，因此这一步我们先写<code>server.go</code>用于测试</p>
<p>在<code>server</code>模块下 新建<code>server.go</code>文件，写入测试内容：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> server</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ServerPort <span class="keyword">string</span></span><br><span class="line">    CertName <span class="keyword">string</span></span><br><span class="line">    CertPemPath <span class="keyword">string</span></span><br><span class="line">    CertKeyPath <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Serve</span><span class="params">()</span> <span class="params">(err error)</span></span>&#123;</span><br><span class="line">    log.Println(ServerPort)</span><br><span class="line"></span><br><span class="line">    log.Println(CertName)</span><br><span class="line"></span><br><span class="line">    log.Println(CertPemPath)</span><br><span class="line"></span><br><span class="line">    log.Println(CertKeyPath)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写cmd"><a href="#编写cmd" class="headerlink" title="编写cmd"></a><strong>编写<code>cmd</code></strong></h2><p>在<code>cmd</code>模块下 新建<code>root.go</code>文件，写入内容：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/spf13/cobra"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rootCmd = &amp;cobra.Command&#123;</span><br><span class="line">    Use:   <span class="string">"grpc"</span>,</span><br><span class="line">    Short: <span class="string">"Run the gRPC hello-world server"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Execute</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := rootCmd.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        os.Exit(<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>emmm….这个官网的Hello World还是有点多的,今天就不写了~~</p>
<p>新建<code>server.go</code>文件，写入内容：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"grpc-hello-world/server"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> serverCmd = &amp;cobra.Command&#123;</span><br><span class="line">    Use:   <span class="string">"server"</span>,</span><br><span class="line">    Short: <span class="string">"Run the gRPC hello-world server"</span>,</span><br><span class="line">    Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Println(<span class="string">"Recover error : %v"</span>, err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">        server.Serve()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    serverCmd.Flags().StringVarP(&amp;server.ServerPort, <span class="string">"port"</span>, <span class="string">"p"</span>, <span class="string">"50052"</span>, <span class="string">"server port"</span>)</span><br><span class="line">    serverCmd.Flags().StringVarP(&amp;server.CertPemPath, <span class="string">"cert-pem"</span>, <span class="string">""</span>, <span class="string">"./certs/server.pem"</span>, <span class="string">"cert pem path"</span>)</span><br><span class="line">    serverCmd.Flags().StringVarP(&amp;server.CertKeyPath, <span class="string">"cert-key"</span>, <span class="string">""</span>, <span class="string">"./certs/server.key"</span>, <span class="string">"cert key path"</span>)</span><br><span class="line">    serverCmd.Flags().StringVarP(&amp;server.CertName, <span class="string">"cert-name"</span>, <span class="string">""</span>, <span class="string">"grpc server name"</span>, <span class="string">"server's hostname"</span>)</span><br><span class="line">    rootCmd.AddCommand(serverCmd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在<code>grpc-hello-world/</code>目录下，新建文件<code>main.go</code>，写入内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;grpc-hello-world&#x2F;cmd&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    cmd.Execute()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a><strong>讲解</strong></h2><p>要使用<code>Cobra</code>，按照<code>Cobra</code>标准要创建<code>main.go</code>和一个<code>rootCmd</code>文件，另外我们有子命令<code>server</code></p>
<p>1、<code>rootCmd</code>： <code>rootCmd</code>表示在没有任何子命令的情况下的基本命令</p>
<p>2、<code>&amp;cobra.Command</code>：</p>
<ul>
<li><code>Use</code>：<code>Command</code>的用法，<code>Use</code>是一个行用法消息</li>
<li><code>Short</code>：<code>Short</code>是<code>help</code>命令输出中显示的简短描述</li>
<li><code>Run</code>：运行:典型的实际工作功能。大多数命令只会实现这一点；另外还有<code>PreRun</code>、<code>PreRunE</code>、<code>PostRun</code>、<code>PostRunE</code>等等不同时期的运行命令，但比较少用，具体使用时再查看亦可</li>
</ul>
<p>3、<code>rootCmd.AddCommand</code>：<code>AddCommand</code>向这父命令（<code>rootCmd</code>）添加一个或多个命令</p>
<p>4、<code>serverCmd.Flags().StringVarP()</code>：</p>
<p>一般来说，我们需要在<code>init()</code>函数中定义<code>flags</code>和处理配置，以<code>serverCmd.Flags().StringVarP(&amp;server.ServerPort, &quot;port&quot;, &quot;p&quot;, &quot;50052&quot;, &quot;server port&quot;)</code>为例，我们定义了一个<code>flag</code>，值存储在<code>&amp;server.ServerPort</code>中，长命令为<code>--port</code>，短命令为<code>-p</code>，，默认值为<code>50052</code>，命令的描述为<code>server port</code>。这一种调用方式成为<code>Local Flags</code></p>
<p>我们延伸一下，如果觉得每一个子命令都要设一遍觉得很麻烦，我们可以采用<code>Persistent Flags</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rootCmd.PersistentFlags().BoolVarP(&amp;Verbose, &quot;verbose&quot;, &quot;v&quot;, false, &quot;verbose output&quot;)</span><br></pre></td></tr></table></figure>

<p>作用：</p>
<p><code>flag</code>是可以持久的，这意味着该<code>flag</code>将被分配给它所分配的命令以及该命令下的每个命令。对于全局标记，将标记作为根上的持久标志。</p>
<p>另外还有<code>Local Flag on Parent Commands</code>、<code>Bind Flags with Config</code>、<code>Required flags</code>等等，使用到再 <a href="https://github.com/spf13/cobra#local-flag-on-parent-commands" target="_blank" rel="noopener">传送</a> 了解即可</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h2><p>回到<code>grpc-hello-world/</code>目录下执行<code>go run main.go server</code>，查看输出是否为（此时应为默认值）：</p>
<p>咕咕</p>
<p>@copyright ————baijianruoliorz@Github——————————–</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>分布式</tag>
        <tag>Grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>Wizz工作室面基大会</title>
    <url>/posts/37390/</url>
    <content><![CDATA[<h3 id="Wizz工作室面基大会"><a href="#Wizz工作室面基大会" class="headerlink" title="Wizz工作室面基大会"></a>Wizz工作室面基大会</h3><p>10月16号,我参加了Wizz的面基大会.</p>
<p>有一说一,之前对这种”<del>ST</del>式”讨论向来是抵制的,不过从今晚来看,感觉的确有很大的作用.</p>
<p>首先是17级转正阿里的TY学长，讲了自己加入为之三年来的成长。<del>阿里真的是我超级心水的公司 当然宇宙条也是</del>.希望自己能成为像学长一样厉害的人吧.</p>
<p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720201017005336.jpg"  alt=""></p>
<p>然后是18级JF学姐，<del>讲太多了</del>讲的内容丰富又让人深思联想.身为Wizz’s leader的她让我开始重新审视”产品”这个职位.(插一句话:开完面基会后与<del>BB酱</del>讨论了相关事宜,,总之我也表达不出来,产品真的是十分有必要的存在,JF学姐的控场能力也超强的.)<del>不过重点是人也漂亮</del></p>
<p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720201017005329.jpg"  alt=""></p>
<p>最后一个<del>突然流水账了起来</del>是我respect的QHT(因为太瑞思拜所以直接打出全名也是理所当然的,ssfd),身为Wizz技术负责人(orzorzorzorzorz(RTWG)当然经常让我直接没事就膜拜他的code.</p>
<p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720201017005339.jpg"  alt=""></p>
<p>以上是学长/姐 们的巨佬发言.</p>
<p>中途大家都轮流简单介绍了自己.令我印象深刻的是拿了BAT三家offer的学姐orzorzorzorz.</p>
<p>接下来就是Z老师了,以及Z老师三个超级强的同事,出口就是某力D总级别的,因为讲话的人太巨了(<del>没有想去WC这回事</del>)所以听的有点迷,总之就是十分dick的那种感觉.老师的照片就不放了,<del>考虑到知名度</del>.</p>
<p>结束的时候大家又去211自由谈论了一会儿,认识了十分可爱又强大的<del>BB酱</del>,因为之前在某实验班面试过我所以还是想深♂入了解一下<del>BB酱</del>.聊着聊着BB酱真的是巨.我只能在旁边疯狂/kk.</p>
<p>本来想和QHT学长也深♂入交流一下,结果他好像很忙/kk. </p>
<p>接着认识了DB的开发者.我GitHub单向fo的巨佬(TG行为真的是呜呜)/kk.</p>
<p>呜呜嘤,好多巨佬啊.萌新只能在一旁ssfd.</p>
<p>Concluded: 我是最菜的了./kk.</p>
]]></content>
      <categories>
        <category>Wizz</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>夜谈</tag>
      </tags>
  </entry>
  <entry>
    <title>写在十八岁之际</title>
    <url>/posts/22741/</url>
    <content><![CDATA[<h2 id="写在十八岁之际"><a href="#写在十八岁之际" class="headerlink" title="写在十八岁之际:"></a>写在十八岁之际:</h2><p>从今天开始就要正式成为成年人了<del>QAQ(成年人不允许这种颜文字</del></p>
<p>没想到写到第二句我就不知道说些什么了,我果然只适合写一些FD的言论.</p>
<p>今年是个令我有很大成长的一年,也是我来到XDU的第二年,不得不说XDU至少在搞机这方</p>
<p>面的氛围可以作为来这里的重要原因.也结识了几个很会搞机的学长(其实也有<del>学姐</del>,但</p>
<p>她们code能力多少弱一些)</p>
<p>想来来这里的第一年和今年心态有很大变化,不会因为我更<del>mature</del>了吧.也更加坚定</p>
<p>了自己未来的目标,个人觉得还是对宇宙机与技术很感兴趣.但是因为这是一篇生日水文</p>
<p>所以严肃一些的话题不予讨论.</p>
<p>我果然不适合写这种一本正经的文章,进入带学撸码一年已经丧失了写作能力…</p>
<p>那就放几个我的项目吧,希望未来能一直走下去.</p>
<p><a href="https://github.com/baijianruoliorz/mengnanClass" target="_blank" rel="noopener"><img src="/" class="lazyload" data-src="https://github-readme-stats.vercel.app/api/pin/?username=baijianruoliorz&repo=mengnanClass"  alt="ReadMe Card"></a></p>
<p><a href="https://github.com/baijianruoliorz/bluebell" target="_blank" rel="noopener"><img src="/" class="lazyload" data-src="https://github-readme-stats.vercel.app/api/pin/?username=baijianruoliorz&repo=bluebell"  alt="ReadMe Card"></a>    </p>
<p><a href="https://github.com/baijianruoliorz/renting_springboot" target="_blank" rel="noopener"><img src="/" class="lazyload" data-src="https://github-readme-stats.vercel.app/api/pin/?username=baijianruoliorz&repo=renting_springboot"  alt="ReadMe Card"></a></p>
<p>使命は、何としても完成するのか.</p>
]]></content>
      <categories>
        <category>夜谈</category>
      </categories>
      <tags>
        <tag>夜谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/520520/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>夜谈</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>总结</tag>
        <tag>平淡の日常</tag>
      </tags>
  </entry>
  <entry>
    <title>憧憬と尸の道</title>
    <url>/posts/13965/</url>
    <content><![CDATA[<p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720200704150735.jpg"  alt="image"></p>
<p>人类的记忆那一天已苏醒</p>
<p>夜幕中摇晃的身影虚幻的步伐</p>
<p>忐忑不安踏着声响</p>
<p>无法掌握他梦中想看见的未来</p>
<p>却在薄冰上绽放</p>
<p>每当太阳西沉黑暗夜幕已降下</p>
<p>那冰冷的手总会轻轻划过我们的脸庞</p>
<p>温热的血与铁交杂背向黄昏伫立的身躯</p>
<p>追寻着希望下的光晕</p>
<p>哪怕这生命，正迈向炼狱，笔直前行通过碎石和血腥</p>
<p>梦境的全貌已经触手就可及</p>
<p>你愿意牺牲多少来一窥秘密</p>
<p>恶魔在你耳边他轻声地歌唱</p>
<p>就用尸体骸骨铺路向前进</p>
<p>那高墙对面存在着怎样的命运</p>
<p>此刻唤起回忆中的童年憧憬</p>
<p>真相就在眼前那咫尺的距离</p>
<p>只要跨过尸体骸骨向前进沙盒的轮回重复的上演</p>
<p>哭泣哀悼愤怒怨恨的伤悲</p>
<p>反复地写入它记忆的终点</p>
<p>自由是否可有也可无</p>
<p>Ah-未来本应该有无限的道路</p>
<p>宿命却催促踏上征途</p>
<p>他们命运有如罗盘指向同个地方</p>
<p>那究竟是谁的悲愿又是谁的梦想</p>
<p>怨恨交织愤怒呐喊撕裂着心脏</p>
<p>炽热红莲的箭矢彼此相向憧憬自由羽翼的勇敢战士啊</p>
<p>展开翅膀向着天际直冲而上</p>
<p>恶魔在你耳边他奸诈地歌唱</p>
<p>踏着尸体骸骨道路前进吧</p>
<p>在天空那段存在着怎样的命运</p>
<p>像是灯火般童年被囚禁的心</p>
<p>如今火焰燃烧着真相与过往</p>
<p>照亮那片尸体骸骨的前方</p>
<p>“从天上向下俯瞰的话，<br>   到底会看见什么样的景象<br>   好想去看看未知的地方，<br>   到处漫步游荡</p>
<p>   从小时候就梦想着远方，<br>   辽阔的宽广的大地尽头啊<br>   孩子怀抱着荒谬的幻想，<br>   总有一天会实现的吧</p>
<p>   不停的向往那自由的代价<br>   就是躺卧在冰冷的泥土上<br>   为了正义化身成野兽，张牙舞爪撕咬着对方<br>   不管牢笼之中或是之外<br>   莫非都是残酷地狱景象”随着背负的罪孽越来越沉重</p>
<p>每个步伐就承载了更多的梦</p>
<p>恶魔在你耳边他轻声地歌唱</p>
<p>踏着尸体骸骨道路前进吧</p>
<p>那黑暗之后存在着怎样的命运</p>
<p>童年诅咒如今不再迂阔空虚</p>
<p>何时才能实现那寄予的愿望</p>
<p>就在跨过尸体骸骨的前方</p>
<p>红莲的箭矢疾风呼啸而去</p>
<p>散落满天的羽翼</p>
<p>心脏就算撕裂贲张</p>
<p>Requiem也不需要高声歌唱</p>
<p>太阳在灵魂消逝西沉之前都不会落下</p>
<p>勇敢的向前进吧</p>
<p>向着波涛的彼方</p>
<p>(END)</p>
]]></content>
      <categories>
        <category>摸鱼</category>
      </categories>
      <tags>
        <tag>摸鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>Stop Worship others</title>
    <url>/posts/14526/</url>
    <content><![CDATA[<h6 id="Stop-Worship-others"><a href="#Stop-Worship-others" class="headerlink" title="Stop Worship others"></a>Stop Worship others</h6><p><img src="/" class="lazyload" data-src="https://ipcounter.ihcr.top/"  alt="img"></p>
<p>我决定要改掉乱膜拜他人这个习惯 不为什么 </p>
<p>当然请把乱字作为上一句话的重点</p>
<p>不是不膜拜 而是不乱膜拜</p>
<p>诚然 我们每个人都会从自认为彩币或NB的人身上学习知识</p>
<p>但是我们更喜欢膜拜NB的人</p>
<p>虽然彩币也有时候值得学习</p>
<p><strong>下面上段曹大佐写的知乎正文:</strong></p>
<p>『除了极少数发自内心地热爱科学的奇行种（没错，这种人即使在清华也是极少数）外，绝大多数人，如果没有点儒家特色的自我恫吓习惯与能力，是不可能考得上清华的。在高分段，决定你能上清华，还是只能上北航的，并不是你的智商或者说做题能力，而是你犯的低级错误够不够少。这一点，我一说，高分段考生自然全懂。谨小慎微的能力，至少值两道物理大题。</p>
<p>这种自我恫吓延续到了大学，自然就变成了这种膜拜大神。他们不是虚伪，他们是真的怕。怕已经内化到了他们的骨子里。</p>
<p>你说这种自我恫吓到底是好是坏呢？我还是那句话，你到一个年龄，就去做一个年龄该做的事儿。你15岁的时候这样，那你是好孩子，你懂事儿，要夸。你18岁的时候这样，那你是正常人，可以原谅。你22岁的时候还这样，那你这心智发展多少有点落后于同龄人。</p>
<p>你要是25岁还玩这套，那我可以笃定地说，这清华对你来说就是个de-education，念了还不如不念，不念至少还能做个正常人。</p>
<p>你要是30岁还玩这套……<br><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/VI%5DQT8U%24QAFS%7EG%29%7E%25E1U5HY.jpg"  alt="img"></p>
<p>y:我爱中国永远是本博客的主色调</p>
<p>兄弟，我掏钱给你挂个号。治病不丢人。』</p>
<p>我已经18岁了 多少得搭上正常人这趟车</p>
<p>想起来 膜拜他人这事情因我而起 希望大家不要再学习</p>
<h3 id="但是作为一个FD-发抖-的人-还是得夹杂一些学习干货"><a href="#但是作为一个FD-发抖-的人-还是得夹杂一些学习干货" class="headerlink" title="但是作为一个FD(发抖)的人 还是得夹杂一些学习干货"></a>但是作为一个FD(发抖)的人 还是得夹杂一些学习干货</h3><p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/XVJJX%608855AASIHXUP%7DYV%5B5.jpg"  alt="img"></p>
<p>输出文化，得那文化先有价值，在自己的生态位称得上牛逼。不论通俗文化精英文化，我真不知道，现在有什么活东西可输出给人家？您不会还惦记让五千年灿烂文化迈着老胳膊老腿来吧？</p>
<p>当然在小战狼们眼中，有了钱有了飞机大炮，多烂也有人来舔。普通人也有个莫名其妙的自信:富起来自然就能做出好东西了嘛，人均gdp还不到1w美元时当然不行了。又或者谦虚一点:我们输出不了欧美日韩，还输出不了非洲吗？</p>
<p>能不能输出，看质量，能输出多大规模，才看势力。别逮着一只“经济基础决定上层建筑”往死里薅了，那是认识论？方法论？还是方法？定义搞清了吗下句还记得吗？托尔斯泰陀思妥耶夫斯基那阵，俄罗斯在西欧看来就是帮土匪，照样被跪。《铁臂阿童木》是52年开始画的，日本刚把垃圾堆收拾好。东欧，拉美的文学，都是多少钱堆出来的？相信我，就算特朗普亲自去捧，世界人民也没那兴致老掏腰包买朝鲜新闻风格的av。</p>
<p>到这里，他们已经开始骂“跪久了站不起来了”那我问问，87西游记就输出东南亚了，那会谁比谁富？说什么“刚吃饱肚子下一步才能搞文化嘛”哪家是昨晚通的电？每个时点都把前面几十年一笔勾销真的好吗？</p>
<p>至于输出非洲啥的，互联网时代的文化，叫做“赢者通吃”，别的也就成为小众材料。环球同此凉热，打开电脑手机就有《权力的游戏》看，那些说法语和英语的非洲人民干嘛要拿手撕鬼子当主食呀？</p>
<p>不论精英文化通俗文化，你就告诉我，你拿谁去把欧美已有的比下去？甭比下去，一个水准就行。</p>
<p>体育娱乐，足球……过，提这个算欺负人。</p>
<p>游戏，吃鸡是韩国做的，英雄联盟是美国团队，就算我这种落伍玩家，魔兽实况生化质量效应模拟人生……怎么，要提死得差不多了的轩辕剑仙剑吗？那还是台湾的。（此处不免又有人打我个什么毒）指望古剑撑起半边天？</p>
<p>流行歌曲，从路易阿姆斯特朗开始，把披头士猫王acdc abba boneym杰克逊麦当娜碧昂丝布兰妮后街霉霉日日水果马老五火星哥贾斯丁碧梨……都听那么一两首，然后告诉我，你用吴亦凡去碾压艾米纳姆么？（吴亦凡都是韩国造的）不用鲍勃迪伦，LADY GAGA写的歌词，深度真有还活跃的国内歌手比得上吗？</p>
<p>经济学，嚷嚷牛逼的有种你不学弗里德曼凯恩斯曼昆。哲学，社会学，政治学……最无力的是思想，最有力的也是思想。为什么没事只试图输出孔子？一半是因为真不出新人啊。我们假定孔子的价值等于苏格拉底，甚至假定王阳明等于洛克，培根，那么，卢梭在哪里？黑格尔在哪里？罗素？福柯？伯林？那都是正经用文字影响了历史进程的人，鲁迅受尼采叔本华，胡适受杜威，那谁受马克思的影响，总知道吧？中国当代哲学家……周国平么？小粉红怕是只知道周小平吧？面对至道学宫几十万信众，说李泽厚我怕难住他们。秦晖老师我很尊敬，但是他真的能和齐泽克比肩吗？</p>
<p>讨论社科问题，还能在大众视野里的，也就那个被普通青年骂了半天封为“油腻男”的许知远了，他的书里提出的问题，真的看了吗？他至今还没有被小战狼们围攻，仅仅是因为他们不读书。而许的价值，刻薄地说，就是总结归纳了大量西方观点，而不是原创。哲学系、社会学系现在的教学逻辑有多尴尬，不便细说。高校里的唯金钱至上，水论文至上，举报老师之类，我也不熟，不提为妙。</p>
<p>《辐射》《银河护卫队》《瑞克与莫迪》里来不来用一些风格诡异可是就很好听的老歌，你心血来潮找一下原曲，居然是80年代70年代甚至黑白时代的！可一个中国老歌迷要是回忆80年代以来的经典，却会发现（把港台都算上），《冬天里的一把火》是翻唱的，《千千阙歌》是翻唱的，《恋人未满》《日不落》，中岛美雪汉化组翻唱了一百多版……以下省略几千字，《好大一棵树》《今儿高兴》《嘻唰唰》《恋恋风尘》……嗯我啥也没说。</p>
<p>落后，底子差，学学人家不丢人，落后还觉得自己牛逼，就丢人了。那些喜闻乐见的综艺节目，你告诉我哪个不是学国外节目学得好，然后受欢迎的？</p>
<p>你说现在的独立音乐有希望？希望早就有过，有过，有过，从八十年代就有过，从第一代摇滚人到94新声代到……每次有完了就没下文了。</p>
<p>电影其实倒是看起来挺不错的一个了。《流浪地球》（其实包括《战狼2》）真达到好莱坞水准了，说实话这让我大吃一惊，这在十年前是不可想象的。电影工业的上限进步了，但那叫“奥运金牌”，你给我找出一个敢说整体水平大幅提升了的业内人来？《流浪地球》导演自己说，和卡梅隆差距还有一百年。至于产业乱像，一个小回答别写了吧？（其实是不太懂）</p>
<p>而且，电影艺术的水平，怕是下降了吧？时不时发现个“远古神片”比如《三毛从军记》的背后，其实是电影在政策与资本双重压力下越来越不敢探索了。别说艺术对工业没用，新浪潮把希区柯克比利怀德奉为导师，后来好莱坞再从欧洲大师那儿又学回技术，吕克贝松们再从好莱坞学弄商业片的经验……不展开了吧。真当好莱坞就是一直卖爆米花，全世界看在美国有钱份上喜欢看啊？</p>
<p>爆米花，那也是得在同类里好吃的那个，才能卖。</p>
<p>电视剧就更是了。不用比美剧英剧日剧了，影视创作人员的梦想是:能恢复国内2000年前后的创作环境就谢天谢地了。提《三国》《红楼》《西游记》算我欺负人，因为那是举国体制。市场化后的《我爱我家》，120集现在至少有100集过不了审。你拍个剧或电影，先把本子送去立项。过了，你以为就能拍了么？弄不好拍完再审时不许上映哦。曾经对东南亚市场完全输出的香港电影，为什么原有市场萎缩却可以方便进入更大市场时，还是死了啊？杜可风接受采访，提到手里还压着足足五部片子。</p>
<p>审查不可怕，可怕的是没有标准的审查，最会变通的王晶，当年提出的问题是“能不能明确告诉我哪个不能拍？”</p>
<p>审查不可怕，可怕的是作者已经放大性自我审查惯了，你就算给他们空间，都已经不会用了，如果你创作过东西就会懂得，发现这个已经在自己身上生根时，有多么疼。</p>
<p>本来就没啥创作自由，再被消费文化洗得全无个性，就说情歌，除了“你伤害了我我好难受”的怨妇怨男风，就想不出别的了。看看《黑镜》，用怀旧写科幻，怎么想的，《escape(the pana colada song)》唱什么？俩口子一块出轨，愣能写成浪漫情歌。</p>
<p>拍《大明王朝》？《走向共和》？你觉得哪个能赚钱？06年的《士兵突击》，都好评成那样了，至今未必收回了本。并没有符合类似欧美艺术院线和部分电视剧的“小投资小回报大自由”生态位，哪个资方不是憋着“捞”笔大的？有几个作者不想成为资方的热捧？还有几个人不是“赚一笔算一笔”的心态？</p>
<p>甚至我觉得，左右着资本趋向的观众都疯了。老一代连看好莱坞爆米花都费劲，也不提了，新生代怎么样呢，提高的知识水平背后是简直下降的审美和不可理喻的道德标准。网文里有一伙读者，男女主必须从头到尾只和一个人上过床，甚至只喜欢过一个（是叫“双洁”吗？）。不爱看关了不就完了，小三看不顺眼，举报！负能量也看不顺眼，举报！反动，那就别提了。举报时，倒想不起道德这玩意了。十年前有人说“安娜卡列尼娜不就是个渣女出轨的故事么？”我当sb看的，没想到居然越来越壮大了。</p>
<p>落后不怕啊，问题是我真看不见向好的苗头:审查方，资本方，创作者，受众。为什么不提李安周杰伦成龙？有一个是在这种文化环境里能成长出来的？</p>
<p>讲真，在东南亚还真是有输出的，但是，并不改变实力很弱的事实，想做大推广，没戏。继续烂下去的话，我怕东南亚人民胃口也没那么好吃嘛嘛香。</p>
<p>文学。精英文学，不是说西方文学大家就出到十九世纪那帮雨果狄更斯托尔斯泰就衰落了，也不是过了卡夫卡福克纳加缪就没人了。和流行音乐一样:从未断代。就不举例了，我也拿不准库切品钦门罗到底多大价值。甚至说没文化的美国吧，不说水平，只说持续性，多少作家活到八十岁居然还能写，索尔贝娄活到2015年，比他大八岁的傅雷呢？作品已经是过了版权保护期了。吴兴华翻译的《神曲》片段，号称神品，只有片段是不是懒呀？还有毕修勺翻译的左拉哪儿去了？沈从文为啥不写小说了？不是翻旧账，问题是新时代小将们，还要把一切不合胃口的打成“公知”，还要文化输出，可就难了，阎连科金宇澄不也刚骂完？为啥只有个被人诟病的方方说话？聪明人谁惹这祸。</p>
<p>至于网文吧，我真看不透，我个人不看好，但真有外国人看。别的能输出的，你非要找个崔健李子柒来，也肯定能找出来，十几亿人好几十年呢。</p>
<p>但就在网上开始吹嘘网文输出之后没几个月吧，一通整顿，死一大片。这可不是心血来潮，隔三差五就来一次。自我审查，网站审查之外，如今又多了举报这个良好习惯。没记错的话，玄幻题材改编电视剧电影也受限吧？说正经的，现在独立游戏何尝没有在国外打榜？但你信不信，一做大，全完？都不用审查部门出手，同行和玩家就能举报得你下架，现在找个毛病出来还不容易么？</p>
<p>免不了有人义愤填膺地找到了破绽：题目是怎么提高输出，你回答了个鬼！</p>
<p>真要认真说，你也就看不到什么了。再说，2-（-1）=3，会算吗？</p>
]]></content>
      <categories>
        <category>夜谈</category>
      </categories>
      <tags>
        <tag>夜谈</tag>
      </tags>
  </entry>
  <entry>
    <title>卷中之王</title>
    <url>/posts/26131/</url>
    <content><![CDATA[<p>emmm,每次这里选封面我都会懒</p>
<p>国内的片源搬过来就糊了</p>
<p>所以只能从推的大触们搬运’’</p>
<p>然而我又不是一个勤快的人</p>
<p>为了封面上的好看</p>
<p>还是无奈搬运中…</p>
<p>没想到的是,就在昨天桑原酱终于把她推的写真换了</p>
<p>佛系粉喜极而泣</p>
<p>当看到一个不太出名的声优likes到4k+时</p>
<p>果然是有大事发生的!!!</p>
<p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720200721012050.jpg"  alt="image"></p>
<p>松冈和爱衣应该是隔壁刀剑神域同时掉线的原因 所以他们抽出档期役一部特别福利的动画</p>
<p>h x ero</p>
<p>看过不少古早画风的福利番(咳) 一直以为这些番都是一些不知名小声优来为了成名而接的</p>
<p>直到看见了杨子役无赖勇者…</p>
<p>她留给我的回忆一定会保存在16年的夏天…</p>
<p>言归正传</p>
<p>h exo居然出乎意料的好看</p>
<p>桑原在其中役的天空寺我也超喜欢~~</p>
<p>貌似是桑原和松冈第一次合作</p>
<p>虽然这也喜闻乐见的是一部后宫番所以基本没啥女主(O其实还是有的)</p>
<p>天空寺在本作大概就是康娜和血小板这样的存在吧(虽然貌似第二集就福利了~)</p>
<p>今年七月不少限制级浮出水面都给人一种眼前一亮的感觉</p>
<p>“好玩的游戏被购买 有趣的番剧被喜欢”</p>
<p>显然 这些番剧在我心里至少是很有趣的 算是给生活增加一丝活力有趣的元素了呢</p>
<p>今天看了刀剑第三集</p>
<p>即使第一集被强行恶性福利了</p>
<p>批站一群批小将把评分刷到8.0</p>
<p>甚至在第三集骑士长和暗黑神一股巨人骨头社画风的打斗弹幕疯狂”就这?”时</p>
<p>我仍然觉得 刀剑也算有趣</p>
<p>小说是去年看完的</p>
<p>有一说一 小说的水平也就正常异世界水平</p>
<p>被吹的太过有这种嫌疑</p>
<p>但是制作组真的是十分用心的将这一段打戏拍好</p>
<p>可能我对刀剑有种偏粉丝滤镜吧</p>
<p>毕竟四舍五入除去民工漫</p>
<p>这就是我的入宅番(笑)</p>
<p><img src="/" class="lazyload" data-src="https://edu-1014.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720200721013242.jpg"  alt="image"></p>
<p>真的很不错了呢!!!</p>
<p>然而骑士长最终还是失败了</p>
<p>即使斩杀了暗黑神 对real world的人不过是换个账号的事情</p>
<p>自己却是做出了献出心脏的决意</p>
<p>这种不公平的行动</p>
<p>好像一个擅长了一个键盘的人某天突然换了一个新的键盘一样</p>
<p>仿佛TM人生一样.</p>
]]></content>
      <categories>
        <category>夜谈</category>
      </categories>
      <tags>
        <tag>夜谈</tag>
      </tags>
  </entry>
  <entry>
    <title>重返高中祭</title>
    <url>/posts/1388/</url>
    <content><![CDATA[<p>今天回高中,和同学玩一天,有什么夜晚回来再说吧.</p>
<p>update:好累,好撑,洗个澡先睡一觉…</p>
]]></content>
      <categories>
        <category>摸鱼</category>
      </categories>
      <tags>
        <tag>摸鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云视频直播</title>
    <url>/posts/17537/</url>
    <content><![CDATA[<h3 id="阿里云视频直播"><a href="#阿里云视频直播" class="headerlink" title="阿里云视频直播"></a>阿里云视频直播</h3><p><img src="/" class="lazyload" data-src="https://ipcounter.ihcr.top/?mode=2&amp;mail=xryang_1@stu.xidian.edu.cn&amp;&amp;qq=1099462011&amp;lg=liqiqi_tql&amp;gh=baijianruoliorz&amp;pic=Chtholly"  alt=""></p>
<h5 id="官网概念"><a href="#官网概念" class="headerlink" title="官网概念:"></a>官网概念:</h5><blockquote>
<p>视频直播服务（ApsaraVideo Live）是基于领先的内容接入与分发网络和大规模分布式实时转码技术打造的音视频直播平台，提供便捷接入、高清流畅、低延迟、高并发的音视频直播服务。</p>
</blockquote>
<ol>
<li>通过采集设备将直播流推送至阿里云直播中心，推送的视频流通过CDN边缘节点进行加速保证上行传输的稳定性。移动端的推流工具可以集成阿里云提供的直播推流SDK进行开发。</li>
<li>视频流推送至阿里云直播中心后，可按需对视频流进行转码，录制，截图，安全审核等处理。</li>
<li>处理好的视频流通过CDN内容分发网络下发至观众的设备中进行播放。移动端的播放设备可以集成阿里云提供的播放器SDK进行开发。</li>
<li>直播视频除了可以进行转码截图等操作外，还可以进行直播转点播的操作，将录制下来的视频转至点播系统中再进行点播播放。</li>
</ol>
<h5 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程:"></a>操作流程:</h5><p><img src="/" class="lazyload" data-src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/e68588dc-75be-4f20-8d04-b06066dbbc30.png"  alt=""></p>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li>如果您要进行国内的直播活动，需提供已备案的域名才可使用直播服务。</li>
<li>如果您的域名还未备案，请先将域名<a href="https://beian.aliyun.com/?spm=5176.doc25418.416540.19.8SzHLY" target="_blank" rel="noopener">备案</a>。</li>
</ul>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li><p>登录<a href="https://live.console.aliyun.com/#/live/domains" target="_blank" rel="noopener">视频云直播控制台</a>。</p>
</li>
<li><p>单击<strong>域名管理&gt;添加域名</strong>。</p>
</li>
<li><p>配置<strong>播流域名</strong>，并单击<strong>提交</strong>。</p>
</li>
<li><p>单击<strong>返回域名列表</strong>。</p>
</li>
<li><p>单击<strong>添加域名</strong>。</p>
</li>
<li><p>配置<strong>推流域名</strong>，并单击<strong>提交</strong>。</p>
<p><strong>推流域名</strong>添加成功。</p>
</li>
</ol>
<h5 id="低延时直播"><a href="#低延时直播" class="headerlink" title="低延时直播"></a>低延时直播</h5><h2 id="产品背景"><a href="#产品背景" class="headerlink" title="产品背景"></a>产品背景</h2><ul>
<li>“直播+”模式向各垂直领域加速延伸，常见的直播大部分采用RTMP、HLS、FLV协议，技术成熟、兼容性较好、支持大规模并发等优点，但端到端延时最低只能控制在3-6秒，降低了直播的互动体验，也阻碍了直播在一些场景的落地推广。</li>
<li>低延时直播RTS（Real-time Streaming），是在阿里云视频直播（ApsaraVideo Live）的基础上，进行全链路延时监控、CDN传输协议改造成UDP等底层技术优化，通过集成直播播放端SDK的方式，支持<strong>千万级并发场景下的毫秒级延时直播</strong>能力，保障低延时、低卡顿、秒开流畅的极致直播观看体验。</li>
</ul>
<h2 id="产品架构"><a href="#产品架构" class="headerlink" title="产品架构"></a>产品架构</h2><ul>
<li>只需要在现有的直播业务新增一个RTS播流域名即可实现多种协议拉流，标准直播拉流（RTMP/FLV/HLS）沿用原有格式，低延时直播拉流（UDP）使用新协议头artc。</li>
<li>主播端推流不用改造，继续沿用RTMP方式推流。</li>
</ul>
<p><img src="/" class="lazyload" data-src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/df69fef2-0ede-427a-b655-cfcbba102844.png"  alt=""></p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h5><p><strong>首先里面用到了hutool工具包:baby_chick:<del>国产精品</del></strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p><strong>推拉流工具类:用来生成推流以及加密工作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云直播工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunLiveUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(AliyunLiveUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 推拉流地址示例：</span></span><br><span class="line"><span class="comment">     * rtmp://www.ttest.ygdjonline.com/a/a?auth_key=1558065152-0-0-c3cb54d946c0590ca9aeee63573201ee</span></span><br><span class="line"><span class="comment">     * 播流地址</span></span><br><span class="line"><span class="comment">     * 原画</span></span><br><span class="line"><span class="comment">     * rtmp://www.btest.ygdjonline.com/a/a?auth_key=1558065152-0-0-fc711455c0815aeb581385f33451d5b4</span></span><br><span class="line"><span class="comment">     * http://www.btest.ygdjonline.com/a/a.flv?auth_key=1558065152-0-0-221abff1da1ee32151e365cf0dd42a53</span></span><br><span class="line"><span class="comment">     * http://www.btest.ygdjonline.com/a/a.m3u8?auth_key=1558065152-0-0-72124fcc3aee3404b0d65dcc114e207f</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据源id创建该id的推流url</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aliyunLiveConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createPushUrl</span><span class="params">(Integer sourceId, LiveTypeEnum liveTypeEnum, AliyunLiveConfig aliyunLiveConfig)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 推流域名</span></span><br><span class="line">        String pushDomain = aliyunLiveConfig.getAliyunLivePushDomain();</span><br><span class="line">        <span class="comment">// 应用名称</span></span><br><span class="line">        String appName = aliyunLiveConfig.getAliyunLiveAppName();</span><br><span class="line">        <span class="comment">// 流名称</span></span><br><span class="line">        String streamName = StrUtil.format(aliyunLiveConfig.getAliyunLiveStreamName(), liveTypeEnum.getValue(), sourceId);</span><br><span class="line">        <span class="comment">// 推流签名key</span></span><br><span class="line">        String pushIdentKey = aliyunLiveConfig.getAliyunLivePushIdentKey();</span><br><span class="line">        <span class="comment">// 签名url有效时间</span></span><br><span class="line">        Integer identUrlValidTime = aliyunLiveConfig.getAliyunLiveIdentUrlValidTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算过期时间</span></span><br><span class="line">        String timestamp = String.valueOf((System.currentTimeMillis() / <span class="number">1000</span>) + identUrlValidTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组合推流域名前缀</span></span><br><span class="line"><span class="comment">//      rtmp://&#123;pushDomain&#125;/&#123;appName&#125;/&#123;streamName&#125;</span></span><br><span class="line">        String rtmpUrl = StrUtil.format(<span class="string">"rtmp://&#123;&#125;/&#123;&#125;/&#123;&#125;"</span>, pushDomain, appName, streamName);</span><br><span class="line">        log.debug(<span class="string">"推流域名前缀，rtmpUrl="</span> + rtmpUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组合md5加密串</span></span><br><span class="line"><span class="comment">//      /&#123;appName&#125;/&#123;streamName&#125;-&#123;timestamp&#125;-0-0-&#123;pushIdentKey&#125;</span></span><br><span class="line">        String md5Url = StrUtil.format(<span class="string">"/&#123;&#125;/&#123;&#125;-&#123;&#125;-0-0-&#123;&#125;"</span>, appName, streamName, timestamp, pushIdentKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// md5加密</span></span><br><span class="line">        String md5Str = DigestUtil.md5Hex(md5Url);</span><br><span class="line">        log.debug(<span class="string">"md5加密串，md5Url="</span> + md5Url + <span class="string">"------md5加密结果，md5Str="</span> + md5Str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组合最终鉴权过的推流域名</span></span><br><span class="line"><span class="comment">//      &#123;rtmpUrl&#125;?auth_key=&#123;timestamp&#125;-0-0-&#123;md5Str&#125;</span></span><br><span class="line">        String finallyPushUrl = StrUtil.format(<span class="string">"&#123;&#125;?auth_key=&#123;&#125;-0-0-&#123;&#125;"</span>, rtmpUrl, timestamp, md5Str);</span><br><span class="line">        log.debug(<span class="string">"最终鉴权过的推流域名="</span> + finallyPushUrl);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> finallyPushUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建拉流域名，key=rtmpUrl、flvUrl、m3u8Url，代表三种拉流类型域名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aliyunLiveConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">createPullUrl</span><span class="params">(Integer sourceId, LiveTypeEnum liveTypeEnum, AliyunLiveConfig aliyunLiveConfig)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拉流域名</span></span><br><span class="line">        String pullDomain = aliyunLiveConfig.getAliyunLivePullDomain();</span><br><span class="line">        <span class="comment">// 应用名称</span></span><br><span class="line">        String appName = aliyunLiveConfig.getAliyunLiveAppName();</span><br><span class="line">        <span class="comment">// 流名称</span></span><br><span class="line">        String streamName = StrUtil.format(aliyunLiveConfig.getAliyunLiveStreamName(), liveTypeEnum.getValue(), sourceId);</span><br><span class="line">        <span class="comment">// 拉流签名key</span></span><br><span class="line">        String pullIdentKey = aliyunLiveConfig.getAliyunLivePullIdentKey();</span><br><span class="line">        <span class="comment">// 签名url有效时间</span></span><br><span class="line">        Integer identUrlValidTime = aliyunLiveConfig.getAliyunLiveIdentUrlValidTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算过期时间</span></span><br><span class="line">        String timestamp = String.valueOf((System.currentTimeMillis() / <span class="number">1000</span>) + identUrlValidTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组合通用域名</span></span><br><span class="line"><span class="comment">//      &#123;pullDomain&#125;/&#123;appName&#125;/&#123;streamName&#125;</span></span><br><span class="line">        String pullUrl = StrUtil.format(<span class="string">"&#123;&#125;/&#123;&#125;/&#123;&#125;"</span>, pullDomain, appName, streamName);</span><br><span class="line">        log.debug(<span class="string">"组合通用域名，pullUrl="</span> + pullUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组合md5加密串</span></span><br><span class="line"><span class="comment">//      /&#123;appName&#125;/&#123;streamName&#125;-&#123;timestamp&#125;-0-0-&#123;pullIdentKey&#125;</span></span><br><span class="line">        String md5Url = StrUtil.format(<span class="string">"/&#123;&#125;/&#123;&#125;-&#123;&#125;-0-0-&#123;&#125;"</span>, appName, streamName, timestamp, pullIdentKey);</span><br><span class="line">        String md5FlvUrl = StrUtil.format(<span class="string">"/&#123;&#125;/&#123;&#125;.flv-&#123;&#125;-0-0-&#123;&#125;"</span>, appName, streamName, timestamp, pullIdentKey);</span><br><span class="line">        String md5M3u8Url = StrUtil.format(<span class="string">"/&#123;&#125;/&#123;&#125;.m3u8-&#123;&#125;-0-0-&#123;&#125;"</span>, appName, streamName, timestamp, pullIdentKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// md5加密</span></span><br><span class="line">        String md5Str = DigestUtil.md5Hex(md5Url);</span><br><span class="line">        String md5FlvStr = DigestUtil.md5Hex(md5FlvUrl);</span><br><span class="line">        String md5M3u8Str = DigestUtil.md5Hex(md5M3u8Url);</span><br><span class="line">        log.debug(<span class="string">"md5加密串，md5Url    ="</span> + md5Url + <span class="string">"       ------     md5加密结果，md5Str="</span> + md5Str);</span><br><span class="line">        log.debug(<span class="string">"md5加密串，md5FlvUrl ="</span> + md5FlvUrl + <span class="string">"    ------    md5加密结果，md5FlvStr="</span> + md5FlvStr);</span><br><span class="line">        log.debug(<span class="string">"md5加密串，md5M3u8Url="</span> + md5M3u8Url + <span class="string">"   ------    md5加密结果，md5M3u8Str="</span> + md5M3u8Str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组合三种拉流域名前缀</span></span><br><span class="line"><span class="comment">//        rtmp://&#123;pullUrl&#125;?auth_key=&#123;timestamp&#125;-0-0-&#123;md5Str&#125;</span></span><br><span class="line">        String rtmpUrl = StrUtil.format(<span class="string">"rtmp://&#123;&#125;?auth_key=&#123;&#125;-0-0-&#123;&#125;"</span>, pullUrl, timestamp, md5Str);</span><br><span class="line"><span class="comment">//        http://&#123;pullUrl&#125;.flv?auth_key=&#123;timestamp&#125;-0-0-&#123;md5FlvStr&#125;</span></span><br><span class="line">        String flvUrl = StrUtil.format(<span class="string">"http://&#123;&#125;.flv?auth_key=&#123;&#125;-0-0-&#123;&#125;"</span>, pullUrl, timestamp, md5FlvStr);</span><br><span class="line"><span class="comment">//        http://&#123;pullUrl&#125;.m3u8?auth_key=&#123;timestamp&#125;-0-0-&#123;md5M3u8Str&#125;</span></span><br><span class="line">        String m3u8Url = StrUtil.format(<span class="string">"http://&#123;&#125;.m3u8?auth_key=&#123;&#125;-0-0-&#123;&#125;"</span>, pullUrl, timestamp, md5M3u8Str);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"最终鉴权过的拉流rtmp域名="</span> + rtmpUrl);</span><br><span class="line">        log.debug(<span class="string">"最终鉴权过的拉流flv域名 ="</span> + flvUrl);</span><br><span class="line">        log.debug(<span class="string">"最终鉴权过的拉流m3u8域名="</span> + m3u8Url);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String&gt; urlMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        urlMap.put(<span class="string">"rtmpUrl"</span>, rtmpUrl);</span><br><span class="line">        urlMap.put(<span class="string">"flvUrl"</span>, flvUrl);</span><br><span class="line">        urlMap.put(<span class="string">"m3u8Url"</span>, m3u8Url);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> urlMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>阿里云直播配置参数类:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云直播配置参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunLiveConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 推流域名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.live.push.domain&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String aliyunLivePushDomain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拉流域名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.live.pull.domain&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String aliyunLivePullDomain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直播测试appName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.live.appName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String aliyunLiveAppName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直播测试streamName&#123;直播类型&#125;_&#123;类型id&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.live.streamName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String aliyunLiveStreamName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 推流鉴权url key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.live.push.ident.key&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String aliyunLivePushIdentKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拉流鉴权url key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.live.pull.ident.key&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String aliyunLivePullIdentKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鉴权url的有效时间（秒），默认30分钟，1800秒 key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.live.ident.url.validTime&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer aliyunLiveIdentUrlValidTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>直播类型的枚举类:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直播类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"直播类型"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> LiveTypeEnum &#123;</span><br><span class="line"></span><br><span class="line">    course(<span class="string">"course"</span>, <span class="string">"课程"</span>);</span><br><span class="line"></span><br><span class="line">    LiveTypeEnum(String value, String text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value获取text</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTextByValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        LiveTypeEnum[] dictTypeEnums = LiveTypeEnum.values();</span><br><span class="line">        <span class="keyword">for</span> (LiveTypeEnum dictTypeEnum : dictTypeEnums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dictTypeEnum.getValue().equals(value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> dictTypeEnum.getText();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>application.properties配置:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#阿里云直播配置 begin</span><br><span class="line">#推流域名</span><br><span class="line">aliyun.live.push.domain&#x3D;www.xxx.xxx.com</span><br><span class="line">#推流鉴权url key</span><br><span class="line">aliyun.live.push.ident.key&#x3D;xxx</span><br><span class="line">#拉流域名</span><br><span class="line">aliyun.live.pull.domain&#x3D;www.xxx.xxx.com</span><br><span class="line">#拉流鉴权url key</span><br><span class="line">aliyun.live.pull.ident.key&#x3D;xxx</span><br><span class="line">#直播测试appName</span><br><span class="line">aliyun.live.appName&#x3D;ttest</span><br><span class="line">#直播测试streamName&#123;直播类型&#125;&#123;类型id&#125;</span><br><span class="line">aliyun.live.streamName&#x3D;&#123;&#125;&#123;&#125;</span><br><span class="line">#鉴权url的有效时间（秒），默认30分钟，1800秒</span><br><span class="line">aliyun.live.ident.url.validTime&#x3D;1800</span><br><span class="line">#阿里云直播配置 end</span><br></pre></td></tr></table></figure>

<p><strong>AliyunLiveController  api:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/aliyunLive"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunLiveController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliyunLiveConfig aliyunLiveConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"addLive"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addLive</span><span class="params">(Integer courseId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注意，推流要在播流域名里面生成</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(aliyunLiveConfig.toString());</span><br><span class="line"></span><br><span class="line">        String pushUrl = AliyunLiveUtil.createPushUrl(courseId, LiveTypeEnum.course, aliyunLiveConfig);</span><br><span class="line">        log.debug(<span class="string">"推流域名="</span> + pushUrl);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; pullUrl = AliyunLiveUtil.createPullUrl(courseId, LiveTypeEnum.course, aliyunLiveConfig);</span><br><span class="line">        log.debug(<span class="string">"拉流域名="</span> + pullUrl.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="END"><a href="#END" class="headerlink" title="END:"></a>END:</h5><p>访问上面的API控制台就会返回推流与拉流的地址,正式上线的时候,可以返回一个封装的类,里面包含推拉流地址.让主播得知推流地址进行直播,用户拉流地址观看即可.如果是使用的阿里云的服务，后端只需要生成推拉流地址就好了，把地址生成好给移动端，其他都是移动端的工作了</p>
<p>@copyright ————baijianruoliorz@Github——————————–</p>
]]></content>
      <categories>
        <category>alibaba</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>面向字节学习-GO(一)</title>
    <url>/posts/37808/</url>
    <content><![CDATA[<p>面向字节学习-GO</p>
<p>本系列博客为&lt;&lt;Go语言设计实现&gt;&gt;阅读心得.</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>GO</tag>
        <tag>字节面试准备</tag>
      </tags>
  </entry>
  <entry>
    <title>高考</title>
    <url>/posts/5308/</url>
    <content><![CDATA[<!DOCTYPE html> <html lang="zh"> <head> <meta charset="utf-8"/> <title>Markdown在线编辑器 - www.MdEditor.com</title> <link rel="shortcut icon" href="https://www.mdeditor.com/images/logos/favicon.ico" type="image/x-icon"/> <meta name="generator" content="Hexo 4.2.0"></head> <body><p>今早是被噩梦惊醒的</p> <p>可能潜意识里,高考越来越临近.不自主的就多想了一些,虽然平时也没在意.</p> <p>我居然梦见我复读了</p> <p>时间点居然还是诡异的距离高考三个月前 <del>草</del></p> <p>同复读的还有我高中玩的最好的朋友,目前就读于同济大学.</p> <p>但是说到底,他很强,同济大概只是他垫底的大学.高考他的分数也不是太令他满意.</p> <p>出分后,我曾对他说 你上同济是不是觉得有些遗憾</p> <p>他说 肯定有遗憾 但是高考就是这种一锤子买卖</p> <p>所以这个梦的设定就是我和他都复读了 时间点如上一般诡异</p> <p>我曾经觉得西电不是我的最佳去处 我有加分政策可以去一些中流985了</p> <p>事实上 我的同学也有不少靠专项计划加分去好学校的</p> <p>导致我考的比他们高 他们可以去更好的学校</p> <p>不知道这算不算是一个心结</p> <p>我在填报志愿的时候,也是非XX大学不去,而XX大学,就是我专项计划里的一所.我其实可以去里面读一些</p> <p>冷门的专业(好吧 心理学 噗)</p> <p>不知道选择西电选择计算机会让我以后如何 至少现在 我是很庆幸自己所读的大学不坏 所学的专业有所</p> <p>热爱.</p> <p>选择了xx大学的我 现在又会怎么样呢</p> <p>高考填志愿的那个上午</p> <p>我在电脑旁边 对着提前批报上了xx大学</p> <p>有个浙大毕业的舅舅 专门跟我讲了一下 你要选一个好专业(虽说逢人谈贵戚不是好事,但是这里可能为了说服自己或有缘读到这里的你们,这个人有亿点资产(嗯,真的是亿..并且早早把下一代送往大洋对面读 senior high school)在与母上微信交谈中,向我们根据高考分数推荐了</p> <p><strong>XDU</strong></p> <p>这个学校 高考前没有听说过</p> <p>我他么以为是啥垃圾大学 事实也证明了 在我信阳打taxi的地方 司机好事的问起:你是哪所学校就读的</p> <p>我<s>响亮的</s>回答道 :西安电子科技大学!(不能对外行说北雷村吧)</p> <p>害 和我大学一样是个二本吗</p> <p>是的</p> <p>接着来说说噩梦的故事</p> <p>大概是讲我与X同学一起复读 拾起了我许久不曾做的数学题 恰巧X是个数学大佬 看他做起来轻轻松松 </p> <p>而我异常困难,我心中就想:为什么我会的在距离高考三个月前来这里复读啊啊啊啊啊啊!!!!!我现在啥</p> <p>都不会了,梦里的我看着错的不少的数学题,一身冷汗.</p> <p>和梦里与x同学交流后,他说:我放弃同济来复读也有很大的心理压力(此处省略鸡汤)</p> <p>大概这样 我在梦里逐渐放弃了挣扎 决定剩下三个月好好学习 换取个奇迹….</p> <p>后来我就惊醒了…</p> <p>醒来后的许久 我都觉得 啊 有大学上真的太幸福了!</p> <p>XDU真是所好学校呢!!</p> <p>这个梦说来也巧 可能就是为了让我接受已经来了所211的事实吧</p> <p>我的高考分数是基本与我平时分差不多的 高考正常发挥就已经算是超长发挥了 所以来到XDU也没啥好抱</p> <p>怨的 何况在这里也有许多优秀的人(友链)</p> <p>嗯 就这样 高考过去一年了啊~</p> <script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"model":{"jsonPath":"/live2dw/assets/koharu.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":false},"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script></body> </html>


]]></content>
      <categories>
        <category>感想</category>
      </categories>
      <tags>
        <tag>-总结 -感想</tag>
      </tags>
  </entry>
</search>
